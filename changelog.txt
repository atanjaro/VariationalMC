Change log (11/30/2023):
Updated method of performing variational parameter derivative, slater_derivative() (VMC.jl) 
Fixed Metropolis updating, metropolis(). propose_random_hop() deprecated (VMC.jl)
Prototyped measurements (Measurements.jl)
Updated get_equal_time_greens() to use LU factorization instead inversion (Hamiltonian.jl)
Updated build_tight_binding_model() to only include chemical potential term if not being optimized(Hamiltonian.jl)
Updated build_variational_terms() to also return variational operators, V (Hamiltonian.jl)
Updated method of getting variational parameter matrices, get_Ak_matrices() (Hamiltonian.jl)
Added VariationalParameter constructor and updated method of variational parameter definition (Hamiltonian.jl)
Removed optimization flags. If parameter is named in vector, it will be optimized (Hamiltonian.jl)

Change log (12/04/2023):
Created Utilities.jl to house various external matrix functions: diagonalize(), is_invertible(), complex_zeros()
Created the complex_zeros() function to generalize matrices to have complex elements (Utilities.jl)


Change log (12/05/2023):
Moved all Green's function related functions to Greens.jl
Moved is_open_shell() to Utilities.jl
Added method for updating equal-time Green's function (Greens.jl)

Change log (12/07/2023):
Fixed bug where matrices when Lx or Ly = 1, 2 and Lx > Ly or Ly > Lx were being written incorrectly.
Created StochasticReconfiguration.jl to house all functions pertaining to SR. 
VMC.jl now only has stuff pertaining to local updates.
Changed build_slater_determinant() to build_determinantal_state(), as this is more accurate (Hamiltonian.jl)
Changed local_slater_derivative() to local_determinantal_derivative(), as it is more accurate (StochasticReconfiguration.jl)


Change log (01/10/2024):
Created function prototypes related to SR/parameter updating including get_SR_matrix(), get_SR_forces(), parameter_gradient(), 
      and parameter_update!() (StochasticReconfiguration.jl)
Fixed implementation get_Ak_matrices(), which also fixes the scaling issue (Hamiltonian.jl)
Updated local_determinantal_derivative() and local_jastrow_derivative() methods (StochasticReconfiguration.jl)
Created the Jastrow type (Jastrow.jl)
Updated build_jastrow_factor() method. Function now creates an instance of the Jastrow type (Jastrow.jl)

Change log (01/11/2024):
Updated the definition of 'η' to rflect its role as a a stabilization factor. Added 'dt', which is the initial SR optimization rate (run_simulation.jl)
Upadted measure_double_occ(), measure_local_energy() (Measurements.jl)
Changed get_SR_matrix() to get_SR_comatrix() (StochasticReconfiguration.jl)

Change log (01/19/2024):
Updated do_particle_hop!() (VMC.jl)

Change log (01/24/2024):
Updated recalc_equal_greens() and added maximum allowed error in Green's function as a stabilization factor (Greens.jl and run_simulation.jl)
Added recalc_Tvec() for numerical stabilization (Jastrow.jl)
Updated measurment initialization (Measurments.jl)

Change log (01/31/2024):
Updated methods for performing Green's function floating point error check (Greens.jl)
Updated methods for performing T vector floating point error check (Greens.jl)
Changed type VariationalParameter to DeterminantalParameters (Hamiltonian.jl)
Changed instances of variational_parameters to determinantal_parameters, as the latter is more accurate. variational_parameters for here on will only be 
      used to refer to determinantal_parameters+jastrow_parameters (Hamiltonian.jl, run_simulation.jl)
Added num_detpars to definition of DeterminantalParameters (Hamiltonian.jl)
Created method to find total number of variational_parameters get_num_vpars() (Utilities.jl)
Updated get_SR_comatrix() and get_SR_forces() methods (StochasticReconfiguration.jl)


Change log (02/12/2024):
Changed the name of functions get_SR_matrix(), get_SR_forces(), and parameter_update!() to get_sr_matrix(), get_sr_forces(), and sr_update!(), respectively (StochasticReconfiguration.jl)
Updated definition of measure_local_energy() to properly loop over nearest neighbors of particle β (Measurements.jl)
Moved derivative measurements to Measurements.jl, as they make more sense there
Changed local_determinantal_derivative() and local_jastrow_derivative() to measure_local_detpar_derivative() and measure_local_jpar_derivative(), respectively (Measurements.jl)


Change log (02/26/2024):
Updated Jastrow type and add function map_jpars(), to more easily track Jastrow parameters (Jastrow.jl)


Change log (04/22/2024):
Updated some function defintiions in Jastrow.jl
Updated some measurement schemes in Measurements.jl
Created src directory
Created test directory

Change log (04/23/2024):
Begin adding unit tests for each module
Fixed bug in get_particle_numbers() where ndn was being calculated incorrectly

Change log (04/24/2024):
Added initialize_measurement_container() and initialize_measurements!() to Measurements.jl
Updated definitions of measure_local_energy() and get_jastrow_ratio()
Updated do_particle_hop!() into a mutating function
Minor definitional update to update_particle_posistions!()
Updated local_update!() to local_fermion_update!()

Updated initialize_measurement_container() to also hold measurements of the local derivatives. These are not written to scalar measurements because they are not a usual observable

Change log (05/07/2024):
Updated measurements to also record value of variational derivatives
Updated metropolis() to also have arguments of 'W' and 'jastrow' and created additional versions which accepts mutiple Jastrow factors
Updated generate_initial_onsite_phonon_configuration() to have the maximum upper bound be typemax(Int) (basically Inf)
Updated generate_initial_bond_phonon_configuration() to have the maximum upper bound be typemax(Int) (basically Inf)

Change log (05/08/2024):
Updated methods for Jastrow factors and associated updates
Updated metropolis() as previous retrieval of the Green's function element resulted in every proposed hop being rejected
Added function measure_Δk() which returns all derivatives of all variational parameters
Added function measure_measure_ΔkE() to return the product of log derivatives with the local energy
Added function measure_ΔkΔkp() to return the product of log derivatives

Upcoming changes: 
Need to update_equal_greens!() method as there is currently a dimension mistmatch when performing the update FIXED ON 05/10
New bug found: need to re-check how the code checks for singular configurations during the initial config step
Maybe add a new type(s) for performing measurements?

Change log (05/10/2024, 05/21/2024):
Fixed bug in update_equal_greens!(), as the outer product was not being taken correctly
Performed test of local_fermion_update!() up to parameter tracking
Re-updated metropolis() method to also handle multiple jastrow factors
Changed measure_derivatives() functions to get_derivatives(), and changed measure_local_energy() to get_local_energy(). Any
      instance of measure will mean that the value is tracked in the measurement container
Updated measurement container to separate derivative measurments as it's own sub-container also changed 'global_measurements' to 'expectation', 
      as this makes more sense and will not get confused with the true global value at the end of the simulation
Updated measure_() methods to write local values to the measurement container

Upcoming changes: 
Need to factor in binning for the measurment container (should be simple change)
Need to update SR method accounting for changes in measurements (SR matrix, vector population)

Change log (05/22/2024):
Updated method for calculating SR force vector 
Updated method for calculating SR covariance matrix
Updated the measure_ΔkΔkp!() method
Moved get_parameter_indices() function to Utilities.jl
Added cat_vpars() function to Utilities.jl for combining all variational parameters 
Updated parameter_gradient() method

Upcoming changes:
Need to factor in binning for the measurment container (should be simple change)
Add tracking (measurements) of  variational parameters

Change log (05/23/2024):
Added parameter tracking to measurement container


Change log (06/05/2024):

Upcoming changes:
Need to debug sr_update!() method. There seems to be an issue with the measurement of the local derivatives.

Change log (06/11/2024):
Fixed bug in initializing the measurement container, where the initial variational parameters were not initialized correctly.
Fixed variational parameter derivative initialization in the measurement container.
Fixed bug in measurement of local derivatives in the sr_update!() method.
Updated the initialize_measurement_container() method to ensure seperate arrays for each measurement.
measure_Δk!() method has been debugged and updated.
measure_ΔkΔkp!() method has debugged and updated. 
Changed the variable 'U' for the matrix which diagonalizes H_MF to 'P' to avoid conflict with the Hubbard 'U' (why I didn't realize this before,
      I'm not sure)
Updated get_local_energy() method, where the Hubbard energy could not be computed due to the aformentioned bug.
measure_ΔkE!() method has beedn debugged and updated.
measure_local_energy!() method has been updated.


Upcoming changes:
Check propagation of iterations through the course of all updates.


Change log (06/18/2024):
Fixed get_sr_forces() method, which had previous issue retrieving the local energy.
Fixed parameter_gradient() method, which was incorrectly adding the small variaiton for stabilization. Also fixed issue with the solving of the
      matrix equation required to get the variation of the parameters.

With these fixes, the local_fermion_update!() method is now operational!

Upcoming changes:
Need to check acceptance rates of the local fermion update
Need to re-re-check the starting configuration of the simulations i.e. checking that we do not start on the singular configuration.
Need to check numerical stabilization routines.
Need to implement binning!
Need to add write_measurments!() method

Change log (07/18/2024):
Updated Jastrow keys and methods to include electron-phonon density-displacement and phonon density-density Jastrow factors:
      "e-den-den"   - electron density-density 
      "e-spn-spn"   - electron spin-spin
      "ph-dsp-dsp"  - phonon displacement-displacement
      "eph-den-den" - electron-phonon density-density
      "eph-den-dsp" - electron-phonon density-displacement.
Updated local_fermion_update!() to return acceptance rate and fixed number of moves per update.
Started creating multi-Jastrow factor versions of dependent functions :
      local_fermion_update!(model_geometry, tight_binding_model, jastrow1, jastrow2, pconfig, rng) - 
      get_local_energy(model_geometry, tight_binding_model, jastrow1, jastrow2, pconfig)
Updated verbose printouts.
Updated invertibility check method to determine whether starting configuration is singular.

Upcoming changes:
BUGFIX: There is a new bug in performing SR (sr_update!()) related to the meaasurement of (measure_Δk!()). The specific error is:
            ERROR: MethodError: no method matching +(::Float64, ::Nothing)
Need to check cases where all updates are rejected?


Change log (07/19/2024):
Fixed bug in get_local_jpar_derivative() where the Jastrow keys had not yet been updated.
Updated 'μ' to 'μ_BCS'.
Added ability to specify charge and spin stripe initial states.

Upcoming changes:
Need to check acceptance rates. 


Change log (07/22/2024):
Re-organized the structure of run_simulation.jl, which now has examples of different wavefunctions.

Upcoming changes:
BUG: During some simulation runtimes, a particle is mysteriously removed from 'pconfig', causing a reduction 
     in size of 'particle_positions', creating a bounds error. Must figure out why this 'leak' is occuring.

Change log (07/24/2024):
Streamlined get_particle_numbers() and get_particle_density() functions.

Upcoming changes:
BUG: During some simulation runtimes, a particle is mysteriously removed from 'pconfig', causing a reduction 
     in size of 'particle_positions', creating a bounds error. Must figure out why this 'leak' is occuring. This only affects
     simulations randomly
BUG: parameter values are NOT being updated during the Monte Carlo cycles.

Change log (07/25/2024):
Updated initialize_measurement_container() method to store vectors of variational parameter values in parameter_measurements.
Updated sr_update!() to push updated variational parameter values during Monte Carlo cycles.
do_particle_hop!() method moved to ParticleConfiguration.jl.
BUGFIX: fixed random neighbor selection in metropolis()
BUGFIX: do_particle_hop!() method was not accouting for spin species when hopping, thus particle_positions was fluctuating in size.

Upcoming changes:
Optimization of various functions.
Adding binning functionality to measurement container.
Add write_measurements!() method.


Change log (07/26/2024):
Optimized and updated Greens.jl
      Optimized get_equal_greens() method.
      Optimzed update_equal_greens!() method.
      Optimized and updated recalc_equal_greens() method to account for change in D during simulation.
      Moved build_determinantal_state() method to Greens.jl.
      Optimized build_determinantal_state() method.

Optimized and updated ParticleConfiguration.jl
      Changed 'generate_initial_electron_configuration()' method to 'generate_initial_fermion_configuration()'.
      Optimized generate_initial_fermion_configuration() method.
      Optimized get_spindex_type() method.
      Optimized get_index_from_spindex() method.
      Optimized get_spindices_from_index() method.

Optimized and updated Jastrow.jl
      Optimized get_distances() method.
      Optimized set_jpars!() method.


Upcoming changes:
Update Jastrow parameter updating/organization.
Adding binning functionality to measurement container.
Add write_measurements!() method.


Change log (07/30/2024):
Begin overhaul of the Jastrow.jl module.


Change log (07/31/2024)-(08/01/2024):
Continuing overhaul of the Jastrow module:
      Specified that the get_distances() method will produce type Matrix(Float64).
      Added get_jpar_matrix() method.
      Added get_jpar_map() method.
      Updated get_Tvec() method.
      Redefined the Jastrow struct to include vector of jpars (for parameter updating).
      Deprecated set_jpars!(), get_num_jpars(), and map_jpars() methods.
      Updated cat_vpars() method.


Upcoming changes:
Will add update_jpar_matrix() and update_jpars() methods.
Adding binning functionality to measurement container.
Add write_measurements!() method.
Redo reporting of acceptance/acceptance rates.

Change log (08/02/2024):
Continuing overhaul of the Jastrow module:
      Updated recalc_Tvec() method.
Updated get_local_jpar_derivative() method to reflect change in structure of jpar_map.

Upcoming changes:
Bugfix of update_jastrow!() method. Keys not being recognized.
Adding binning functionality to measurement container.
Add write_measurements!() method.
Redo reporting of acceptance/acceptance rates.
Numerical stabilzation should be done about every 500 iterations, need to 
find a way to incorporate this during MC cycle.

------------------------------------------------------------
                  WEEK OF AUGUST 05, 2024
------------------------------------------------------------

Change log (08/05/2024):
Fixed bug in update_jastrow!() method involving inability to parse jpar_map keys.
Updated LocalAcceptance constructor.
Updated local_fermion_update!() method to include 'n_iter' variable, and logic which checks the iteration 
      number and automatically performs numerical stabilization routines.
Changed 'Jastrow' type to 'mutable struct' for ease of updating during runtime.
Updated recalc_equal_greens() method to return only 'W' and 'D'.
Updated recalc_Tvec!() method
Changed name of main module to 'VariationalMC' to reflect the change in the package name.
Updated and changed name of 'StochasticReconfiguration' module to 'Hessian', as this is a more accurate description:
      Changed 'get_sr_comatrix()' to 'get_hessian_matrix()'
      Changed 'get_sr_forces()' to 'get_force_vector()'
      Updated method names in sr_update!() 


Upcoming changes:
Debug Measurements module, specifically to track the number of current iterations during the course of measurements.
Adding binning functionality to measurement container.
Add write_measurements!() method.


Change log (08/06/2024):
Begin major overhaul of the Measurements module:
      Fixed a major bug in get_local_energy() method as the energy obtained from summing over different spin sectors was being done incorrectly.
      Separated get_local_energy() into parts: get_kinetic_energy() and get_hubbard_energy() in anticipation of the 
            future get_phonon_energy().
Further overhaul of the Jastrow module:
      instead of mapping distances, map jastrow site indices to irreducible indices to associate with each Jastrow parameter.

Upcoming changes:
Continue further overhaul of the Jastrow module:
      Institute new method for storing Jastrow parameters - the dictionary 'jpar_map' will have irreducible index relations as keys referencing values of 
            the indices by which they were derived, and their unique Jastrow parameters. Will once again set the parameter corresponding to the 
            largest distance to be 0.
Debug Measurements module, specifically to track the number of current iterations during the course of measurements.
Adding binning functionality to measurement container.
Add write_measurements!() method.


Change log (08/07/2024):
Removed 'Distances' package from dependencies.
Continue further overhaul of the Jastrow module:
      Added initialize_jpars() methods.
      Redfined the Jastrow struct.
      Deprecated the get_distances() method
      Deprecated get_jpar_matrix() method
      Deprecated get_jpar_map() method
      Updated get_Tvec() method
      Updated update_Tvec!() method
      Updated build_jastrow_factor() method and added an additional version for reading in parameters 
Added fsgn() method to Greens.jl for determining the Fermion sign.
Changed 'cat_vpars' to 'all_vpars'.

Upcoming changes:
Need to change update_jastrow!() and recalc_Tvec() methods.
Need to ensure that all Jastrow parameters are optimized except for the last one, which should be fixed to 0.
Debug Measurements module, specifically to track the number of current iterations during the course of measurements.
Adding binning functionality to measurement container.
Add write_measurements!() method.


Change log (08/08/2024):
Continue further overhaul of the Jastrow module:
      Updated update_jastrow!() method. All parameters are updated except for the last one.
      Updated recalc_Tvec() method
      Re-updated initialize_jpars() methods to also write indices to the map for later use in finding the derivatives of 
            Jastrow parameters.
Moved get_local_jpar_derivative() and get_local_detpar_derivative() to the Hessian module.
Updated get_local_jpar_derivative() method.
Continue overhaul of Measurements module:
      Refreshed initialize_measurement_container() method
      Refreshed all measurement metheods which includes adding an 'iter' variable that tracks the current iteration
      Made energy measurements standard in the measurement container
Added further iteration tracking in Hessian.jl methods.
Added update_detpars!() method to Hamiltonian module.

Upcoming changes:
Need to issue with 'Inf's in energy measurements.
Update pushback of variational parameter values to the measurement container
Adding binning functionality to measurement container.
Add write_measurements!() method.

Change log (08/09/2024):
Instead of random value intialization, updated initialize_jpars() method to start all values are 0.0.
Cleaned up Hamiltonian module:
      Updated fields in build_mean_field_hamiltonian() method    
Fixed bug with checking for singulat configurations:
      A quick test on a 2 site model produces a finite determinant for matrix D and during local updates, does not become ill-conditioned
      (i.e. Infs or NaNs in values). This is because the simulation did not start out on a singular configuration.
Fixed a bug in energy measurments where particle iteration was fixed at 1 (whoops!). Will continue debugging...

Upcoming changes:
Re-check calculation of detpar derivatives.
May need to add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state.
Need to track the energy values even if a change is rejected. That is, carry over values from the previous iteration.
Update pushback of variational parameter values to the measurement container
Adding binning functionality to measurement container.
Add write_measurements!() method.



------------------------------------------------------------
                  WEEK OF AUGUST 12, 2024
------------------------------------------------------------

Change log (08/12/2024):

Upcoming changes:
Performed debug of Jastrow module
      Check computation of all Jastrow related quantities.
      Check updates of Jastrow parameters.


Re-check calculation of detpar derivatives.
May need to add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state.
Need to track the energy values even if a change is rejected. That is, carry over values from the previous iteration.
Update pushback of variational parameter values to the measurement container
Adding binning functionality to measurement container.
Add write_measurements!() method.


Change log (08/13/2024):
Updated local_fermion_update!() method by changing the order sr_update!() and update_Tvec!().
Commented out 'measure_Δk!(measurement_container, determinantal_parameters, jastrow, model_geometry, pconfig, particle_positions,Np, W, A,iter)' in 
      get_force_vector() method as this would double measure the derivative which would have been done prior in the get_hessian_matrix() method.

Upcoming changes:
Need to redo thermalization/equilibration method. Rather than starting to measure everything off the bat, run through a certain number of 
      configurations first then, begin measurements. This may solve the issue with parameter instability so far.
May need to add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Update pushback of variational parameter values to the measurement container
Adding binning functionality to measurement container.
Add write_measurements!() method.

Change log (08/14/2024):
Major overhaul of thermalization/optimization algorithm:
      1. For thermalization/equilibration updates, no measurements are to be taken. The only quantities that should be updated are the particle configuration,
            the Green's function, and the T vector.
      2. After theramlization is complete, we begin optimization updates and begin measuring quantities for Stochastic Reconfiguration.
      3. At the end, another Monte Carlo cycle is initiated to take measurements of various observables.
      4. Write all measurements to file.

      Updated local_fermion_update!() method to not include SR updates. This will allow it to be used correctly for doing thermalization updates.
      Updated is_invertible() information printing.
      Re-re-updated the initialize_measurement_container() method. Binning is now incorporated into the measurement container.
      Updated the initialize_measurements!() method for the intialization of observable measurements.
      Updated measure_Δk!() and measure_ΔkE!() methods.

Upcoming changes:
add an 'update_container!()' method?
Change method of parameter updating in sr_update!() method.
Need a better way to tracking the current number of visited configurations for measurements. Initially we start by doing N_equil*Np + n. Need some kind of accumulator
      for configurations.
May need to add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Add write_measurements!() method.



Change log (08/15/2024):
Added 'N_configs' to measurement container to track the number of vsited configurations.
Updated measurement function definitions to take n, bin, N_configs for the nth bin and current number of configurations visited along the 
      Markov chain. Update includes functions in Hessian.jl.
Fixed minor BUG in get_hessian_matrix() method where the incorrect value of Δk from the measurement container.
Fixed minor BUG in measurement container initialization, where the inocrrect bin sizes for the "ΔkE" were being initialized.
Fixed minor BUG in measurement container where the incorrect number of parameters initializes vectors of the wrong size.
Added parameter updating to measurement container in sr_update!() method.

Upcoming changes:
BUG: derivative and parameter updating. Information is being written to the measurement container incorrectly, thus 
      the optimization step does not function properly.
Need to DEBUG T vector stabilization method.
Add an 'update_container!()' method?
May need to add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Add write_measurements!() method.


Change log (08/16/2024):
Reinstated the push back of Jastrow and determinantal parameters to their respective places, since the calculation of the derivatives
      relies on this. 


Upcoming changes:
Need to change order of optimization updates:
      For N bins
            For n times, where n is the size of each bin:
                  1. Perform local update (local_fermion_update!())
                  2. Measure local values of observables i.e. energy and derivatives (this is pushed to binned_local_values)
                  3. Get bin average (the binned average is done by doing the sum of the values divded the the bin size)
                  4. Perform stochastic reconfiguration (take the bin averages to do SR)
      To reiterate, the structure of the measurement container is: "key" => (current_bin_average, binned_local_values)
Write a make_measurements!() function for obtaining various observables. This might also be useful for measuring after optimization.
BUG: derivative and parameter updating. Information is being written to the measurement container incorrectly, thus 
      the optimization step does not function properly.
Need to DEBUG T vector stabilization method.
Add an 'update_container!()' method?
May need to add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Add write_measurements!() method.


------------------------------------------------------------
                  WEEK OF AUGUST 19, 2024
------------------------------------------------------------

Change log (08/20/2024):
Added make_measurments!() method, which measures the local energy and parameter derivatives for each bin.
Changed sequence of optmization updates:  
      For bin in N_bins 
            For n in 1:bin_size
                  1. Perform local fermion update [local_fermion_update!()]
                  2. Record acceptance rate
                  3. Make measurements of observables in the current bin [make_measurements!()]
            Perform Stochastic Reconfiguration for the current bin.
Updated writing to measurement container in each measurement method.
Updated get_force_vector() method.
Updated get_hessian_matrix(), get_force_vector(), and sr_update!() methods.
Updated the parameter container in the measurement container.
Fixed bug where energy measurements were being written to the derivative container.



Upcoming changes:
BUG: REALLY low acceptance rates for Metropolis step e.g. fermionic_local_acceptance_rate = 0.0015
      Possibel issue with Green's function updating?
Need to DEBUG the local energy calculator? Need to check if there is possible double counting in the neighbor sum.
      Note: for a 1D system, the neighbor table and resulting map differs from that for a 2D system in that 'self' values are reported.
Need to DEBUG T vector stabilization method.
Add an 'update_container!()' method?
May need to add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Add write_measurements!() method.


Change log (08/21/2024):
Fixed major BUG in the updating of the Green's function:
      The previous updating scheme was done incorrectly and resulted in zero columns in the Green's function. This would slow/prevent acceptance
            during the MC cycle.
      Updating the Green's function now uses the BLAS (s/d)ger method for rank 1 updating.
      Example new acceptance rates are ~0.21 for 2x2 lattice and ~0.459 for a 2 site chain.
Fixed BUG in get_jastrow_ratio() method where the identity of intial and final sites k and l, respectively, were flipped.

Upcoming changes:
MAJOR ALGORITHM UPDATE: the algorithm for performing the optimization and simulation updates will be changed in the next update.
Change Jastrow initialization to random values of the form 0.01*rand(rng)
DEBUG T vector stabilization method.
Add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Add write_measurements!() method.


Change log (08/22/2024):
Changed N_equil to N_opts to correctly reflect optmization updates.
Split time measurements into optimization and simulation times.
Updated additional info dictionary entries.
Change Jastrow initialization to random values of the form 0.01*rand(rng) (if not reading in from file).
Added exit condiion if an open shell is detected.
Updated generate_initial_onsite_phonon_configuration() and generate_initial_bond_phonon_configuration() methods.
Added local_boson_update!() method to Markov module.
Added additional metropolis() method to ParticleConfiguration module for doing bosonic updates.

Upcoming changes:
MAJOR ALGORITHM UPDATE: the algorithm for performing the optimization and simulation updates will be changed in the next update.
Combine local updates into a single function?
DEBUG T vector stabilization method.
Add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Add write_measurements!() method.

------------------------------------------------------------
                  WEEK OF AUGUST 26, 2024
------------------------------------------------------------

Chnage log (08/26/2024):
Updated measurement container to reflect new quantities: N_opts, opt_bin_size, N_updates, N_bins, bin_size.
Updated definition of local_fermion_update() method by removing Ne ( no longer needed) and added mc_meas_freq to arguments.
Changed structure of measurement container:
      Removed the derivative_measurements container and instead added an optimization_measurements container which contains both the parameters and their derivatives
      Added additional storage of energy measurments during optimization
      Added storage of particle configurations during optimization and simulation in scalar_measurements container
      Appropriately updated various measurement methods as a result of this change

Upcoming changes:
Need a way to distinguish within the measurement container, whcih energies to take. Perhaps we just create another energy container within the optimization container,
      then, the optimization functions i.e. sr_update() will only call the energy values from the optimization container
A similar thing need to be accounted for when doing different bin sizes
Will change the measurement container (AGAIN) such that it merely holds measurements for each bin in escrow before writing to a JLD2 file. Once the bin is complete,
      the write_measurements!() function is called to write the data before overriding the current container with 0s
Combine local updates into a single function?
DEBUG T vector stabilization method.
Add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Add write_measurements!() method.


Change log (08/29/2024):
Updates to measurement container:
      Changed the structure of the container such that each key points to a tuple which consists of: an accumulator for current bin (1/N_updates) * ∑_n^N_bins ⟨O⟩_n,
            where N_updates is either N_updates or N_opts and n is the bin number, and current measurement values while going through each bin.
   Made appropraite updates to all measurement methods in light of this change.
Added SimulationInfo.jl, which will cover most file handling tasks.
      Added SimulationInfo type and constructor.
      Added intialize_datafolder() method.
      Added write_measurements!() method.

Upcoming changes:
DEBUG T vector stabilization method.
Add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]

------------------------------------------------------------
                  WEEK OF SEPTEMBER 02, 2024
------------------------------------------------------------

Change log (09/04/2024):
Removed LatticeUtilities from main directory.
Updated SimulationInfo module:
      Updated initialize_datafolder() method to create top level directory for storing all simualtion information.
      Added save_simulation_info() method.
      Prototyped the model_summary() method for writing model information to a .TOML file.
Added initialize_measurement_directories() method for creating subdirectories for storing measurements.
Added VariationalParameter type and constructor.
Added num_detpars and num_jpars to measurement container.
Updated the write_measurements!() method.
      


Upcoming changes:
DEBUG T vector stabilization method.
Update stripe wavefunction.
Add d-wave wavefunction.
Add FFLO wavefunction.
Add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Add backflow correlations for SSH phonons.


Change log (09/05/2024):
Begin general DEBUG:
      Fixed BUG in MC cycle. Previously, there was an issue where the energy could spontaneously change between Metropolis steps as 
      shown for an L = 4 lattice with U = 0.5:

            Hop possible! =>
            Rⱼ = 1.0039058909261358
            Rₛ = 0.4999999921874294
            accept prob. = 0.25195675158532976
            Hop accepted!
            Particle: 8
            Spin: 1
            initial site: 14
            final site: 10
            [ Info: Before update:
            [ Info: particle_positions: Pair{Any, Any}[1 => 1, 2 => 2, 3 => 3, 7 => 7, 8 => 8, 9 => 9, 12 => 12, 14 => 14, 17 => 1, 18 => 2, 20 => 4, 22 => 6, 23 => 7, 26 => 10, 27 => 11, 32 => 16]
            [ Info: pconfig: [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1]
            [ Info: After update:
            [ Info: particle_positions: Pair{Any, Any}[1 => 1, 2 => 2, 3 => 3, 7 => 7, 8 => 8, 9 => 9, 12 => 12, 10 => 10, 17 => 1, 18 => 2, 20 => 4, 22 => 6, 23 => 7, 26 => 10, 27 => 11, 32 => 16]
            [ Info: pconfig: [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1]
            [ Info: Energy: -0.0010517452369946476

            In this case, the energy is still fine after acceptance. The energy changes after the move, which is expected. Here is where the BUG occurs:

            Hop possible! =>
            Rⱼ = 1.1205063242975295
            Rₛ = 1.3268029940671336e-16
            accept prob. = 2.2102505634435096e-32
            Hop rejected!
            Particle: 13
            Spin: 2
            initial site: 7
            final site: 8
            [ Info: Before update:
            [ Info: particle_positions: Pair{Any, Any}[1 => 1, 2 => 2, 3 => 3, 7 => 7, 8 => 8, 9 => 9, 10 => 10, 12 => 12, 17 => 1, 18 => 2, 20 => 4, 22 => 6, 23 => 7, 26 => 10, 27 => 11, 32 => 16]
            [ Info: pconfig: [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1]
            [ Info: After update:
            [ Info: particle_positions: Pair{Any, Any}[1 => 1, 2 => 2, 3 => 3, 7 => 7, 8 => 8, 9 => 9, 10 => 10, 12 => 12, 17 => 1, 18 => 2, 20 => 4, 22 => 6, 23 => 7, 26 => 10, 27 => 11, 32 => 16]
            [ Info: pconfig: [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1]
            [ Info: Energy: 0.0028236136747176923

      where despite the configuration not changing, the energy changes. The issue was traced back to the update_particle_posistions!() method, which would cause a conflict with the 
      actual particle table after update. This has updating method has been removed from local_fermion_update!(), instead, only pconfig is updated and then 
      get_particle_positions() would be called when needed (which is done at the beginning of each MC cylce anyway, and is based directly off of pconfig).

Upcoming changes:
Check that each time make_measurements!() is called, that the current value(s) are being normalized by the bin size.
Check that the measurement container for the derivative is behaving correctly (overwrite to 0 after measurements are written).
Reconstruct the Hamiltonian before recalculation/stabilization of W? Since D and M are required to get W from scratch.
DEBUG T vector stabilization method.
Update stripe wavefunction.
Add d-wave wavefunction.
Add FFLO wavefunction.
Add additional starting configuration method where a certain order is generated. For instance,
      starting the simulation out in an AFM state: pconfig(4x4) = [1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0]
Add backflow correlations for SSH phonons.